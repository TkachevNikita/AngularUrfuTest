/*
游녦 Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! 游눘
*/
module.exports = {
  parser: '@typescript-eslint/parser',
parserOptions: {
  project: 'tsconfig.json',
  sourceType: 'module',
},
plugins: ['@typescript-eslint/eslint-plugin', "unused-imports"],
extends: [
  'plugin:@typescript-eslint/recommended',
],
root: true,
env: {
  node: true,
  jest: true,
},
ignorePatterns: ['.eslintrc.js'],
rules: {
  "prefer-const": "error",
  "semi": "error",
  "unused-imports/no-unused-imports": "warn",
  "@typescript-eslint/no-inferrable-types": "off",
  "padding-line-between-statements": [
      "error",
      {
          "blankLine": "always",
          "prev": "*",
          "next": "return"
      }
  ],
  "@typescript-eslint/member-ordering": [
      "error",
      {
          "default": [
              "static-field",
              "static-method",
              "public-instance-field",
              "protected-instance-field",
              "private-instance-field",
              "public-constructor",
              "protected-constructor",
              "private-constructor",
              "public-instance-method",
              "protected-instance-method",
              "private-instance-method"
          ]
      }
  ],
  "@typescript-eslint/naming-convention": [
      "error",
      {
          "selector": "default",
          "format": [
              "camelCase"
          ],
          "custom": {
              "regex": "^[^햃-햞해햟-혪혬]*$",
              "match": true
          }
      },
      {
          "selector": [
              "classProperty",
              "parameterProperty"
          ],
          "format": [
              "camelCase"
          ],
          "modifiers": [
              "private"
          ],
          "prefix": [
              "_"
          ],
          "custom": {
              "regex": "^[^햃-햞해햟-혪혬]*$",
              "match": true
          }
      },
      {
          "selector": [
              "classProperty"
          ],
          "modifiers": [
              "public",
              "static",
              "readonly"
          ],
          "format": [
              "camelCase",
              "UPPER_CASE"
          ],
          "custom": {
              "regex": "^[^햃-햞해햟-혪혬]*$",
              "match": true
          }
      },
      {
          "selector": "interface",
          "format": [
              "PascalCase"
          ],
          "custom": {
              "regex": "^I[A-Z][^햃-햞햟-혪]*$",
              "match": true
          }
      },
      {
          "selector": "objectLiteralProperty",
          "format": null,
          "custom": {
              "regex": "^[^햃-햞해햟-혪혬]*$",
              "match": true
          }
      },
      {
          "selector": "typeLike",
          "format": [
              "PascalCase"
          ],
          "custom": {
              "regex": "^[^햃-햞해햟-혪혬]*$",
              "match": true
          }
      },
      {
          "selector": [
              "variable"
          ],
          "modifiers": [
              "const",
              "exported"
          ],
          "format": [
              "camelCase",
              "UPPER_CASE"
          ],
          "custom": {
              "regex": "^[^햃-햞해햟-혪혬]*$",
              "match": true
          }
      }
  ],
  "@typescript-eslint/no-shadow": "error",
  "@typescript-eslint/explicit-member-accessibility": [
      "error",
      {
          "accessibility": "explicit",
          "overrides": {
              "constructors": "no-public"
          }
      }
  ],
  "@typescript-eslint/array-type": [
      "error",
      {
          "default": "array-simple"
      }
  ],
  "@typescript-eslint/typedef": "off",
  "@typescript-eslint/explicit-function-return-type": "error",
  "max-classes-per-file": [
      "error",
      1
  ],
  "curly": "error",
  "eqeqeq": [
      "error",
      "always"
  ],
  "indent": [
      "error",
      4,
      {
          "SwitchCase": 1
      }
  ],
  "quotes": [
      "error",
      "single",
      {
          "allowTemplateLiterals": true
      }
  ],
  "object-curly-spacing": [
      "error",
      "always"
  ]
},
};
